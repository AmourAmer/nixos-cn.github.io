import{_ as t,V as o,W as i,Y as n,Z as s,$ as e,X as p,D as l}from"./framework-2c1cfd10.js";const c={},r=n("h1",{id:"nix-语言概览",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#nix-语言概览","aria-hidden":"true"},"#"),s(" Nix 语言概览")],-1),d={href:"https://nixos.wiki/wiki/Nix_package_manager",target:"_blank",rel:"noopener noreferrer"},u=p(`<p>如果你使用过 json 配置文件格式，有一门函数式语言的使用经验（例如 Haskell），或是至少一门面对对象编程语言的使用经验，那你能很快掌握 Nix 语言的使用。<strong>倘若你不满足上面的一个或多个条件也无妨，我们也会详细阐述 Nix 语言的使用方法。</strong></p><blockquote><p>Nix 表达式语言是一门纯粹的，惰性的函数式语言。纯粹意味着语言操作没有副作用（例如传统的变量赋值）；惰性意味着函数的参数只有当函数被调用的时候才会被求值；函数式意味着函数可以被当作常规的值，从而被传递或操作。我们会在进阶篇里详细阐述这些特性，现在你只需要知晓即可。</p><p>Nix 语言的主要工作是<strong>描述打包过程</strong>。同时 Nix 语言也是一门强类型和动态类型的语言。</p></blockquote><h2 id="基础" tabindex="-1"><a class="header-anchor" href="#基础" aria-hidden="true">#</a> 基础</h2><h3 id="交互模式" tabindex="-1"><a class="header-anchor" href="#交互模式" aria-hidden="true">#</a> 交互模式</h3><p>以下交互式教程需要使用 <code>nix repl</code> 命令调出交互命令模式：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ nix repl
Welcome to Nix <span class="token number">2.5</span>.1. Type :? <span class="token keyword">for</span> help.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>它有点像用于调试 JavaScript 的控制台或 Python 的交互模式？</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>nix-repl<span class="token operator">&gt;</span> <span class="token number">1</span> + <span class="token number">2</span>  <span class="token comment"># 输入表达式</span>
<span class="token number">3</span>  <span class="token comment"># 输出结果</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">惰性求值</p><p>Nix 语言默认是惰性求值的，这意味着它只会计算被直接依赖的值，不需要的值将不会被计算。</p></div><h3 id="即时计算被直接依赖的值" tabindex="-1"><a class="header-anchor" href="#即时计算被直接依赖的值" aria-hidden="true">#</a> 即时计算被直接依赖的值</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>nix-repl<span class="token operator">&gt;</span> <span class="token punctuation">{</span> a.b.c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">{</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">..</span>. <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，我们输入了一个匿名集合，而这个匿名集合包含 <code>a</code> 集合。</p><div class="hint-container note"><p class="hint-container-title">匿名集合</p><p>匿名集合即没有分配命名的集合，与之对立的是命名集合，例如 <code>foo = { bar };</code>。</p></div><p><code>a</code> 集合中的值并没有被这个匿名集合直接依赖，自然顶级以下的集合不会被立刻求值。占位的变成了 <code>...</code> 。</p><div class="hint-container warning"><p class="hint-container-title">依赖关系</p><p>直接依赖则是直接赋值（值类型）或调用（函数）的关系。当一个值的求值依赖其他值的求值，我们称这个值间接依赖其他值。</p></div><p>在下面这个例子，我们将显式声明 <code>lax</code> 的直接依赖：</p><div class="language-nix line-numbers-mode" data-ext="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
  foo <span class="token operator">=</span> <span class="token punctuation">{</span> bar<span class="token punctuation">.</span>qux <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  lax <span class="token operator">=</span> foo<span class="token punctuation">.</span>bar<span class="token punctuation">.</span>qux
<span class="token keyword">in</span>
  lax  <span class="token comment"># 我们需要 lax，lax 需要 foo.bar.qux</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以输入 <code>:q</code> 启用详尽求值，所有表达式都将被立刻求值：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>nix-repl<span class="token operator">&gt;</span> :p <span class="token punctuation">{</span> a.b.c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">{</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> b <span class="token operator">=</span> <span class="token punctuation">{</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p><code>:p</code> 参数只能在交互模式使用，输入 <code>:q</code> 可以退出交互模式。</p></div><h3 id="文件求值" tabindex="-1"><a class="header-anchor" href="#文件求值" aria-hidden="true">#</a> 文件求值</h3>`,21),k={href:"https://nixos.org/manual/nix/stable/command-ref/nix-instantiate.html",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"nix-instantiate --eval",-1),m=n("code",null,"*.nix",-1),b=p(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">echo</span> <span class="token number">1</span> + <span class="token number">2</span> <span class="token operator">&gt;</span> file.nix  <span class="token comment"># 该命令会往 file.nix 中写入 1 + 2</span>
$ nix-instantiate <span class="token parameter variable">--eval</span> file.nix  <span class="token comment"># 文件求值</span>
<span class="token number">3</span>  <span class="token comment"># 输出结果</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">详尽求值</p><p>在文件求值的情景下可以通过在命令行添加 <code>--strict</code> 参数来启用详尽求值。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">echo</span> <span class="token string">&quot;{ a.b.c = 1; }&quot;</span> <span class="token operator">&gt;</span> file.nix
$ nix-instantiate <span class="token parameter variable">--eval</span> <span class="token parameter variable">--strict</span> file.nix
<span class="token punctuation">{</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> b <span class="token operator">=</span> <span class="token punctuation">{</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="hint-container info"><p class="hint-container-title">echo 命令</p><p><code>echo</code> 是 Linux 中最常见的命令之一，主要作用是输出文本，追加文本，返回输出。</p><p>你可以键入 <code>help echo</code> 来获取该命令的使用帮助。</p></div><h3 id="语法规则" tabindex="-1"><a class="header-anchor" href="#语法规则" aria-hidden="true">#</a> 语法规则</h3><p>好的代码风格会让程序员身心愉悦，同时也增加了代码可维护性。</p>`,5),x={class:"hint-container info"},h=n("p",{class:"hint-container-title"},"格式化",-1),g={href:"https://github.com/kamadorueda/alejandra",target:"_blank",rel:"noopener noreferrer"},y={href:"https://kamadorueda.com/alejandra/",target:"_blank",rel:"noopener noreferrer"},q=p(`<h4 id="当心空格" tabindex="-1"><a class="header-anchor" href="#当心空格" aria-hidden="true">#</a> 当心空格</h4><p>空格用于分隔词法标记（Lexical tokens），在一些场景是必要的，不然会无法区分关键字。</p><div class="hint-container note"><p class="hint-container-title">注</p><p>在许多中文资料中，混淆了 Lexical，Syntax 和 Grammar 三者的概念：</p><ul><li>Lexical（词法）：是指语言中单词的意义、形态和用法等方面的规则。词法规则定义了单词的基本形态和语法功能，例如名词、动词、形容词等。同时，它还规定了一些特殊单词的用法，例如冠词、介词、连词等。</li><li>Syntax（句法）：是指语言中标记（Token）之间的组合方式，以及这种组合方式所遵循的规则。通俗点说，语法规定了单词应该如何排列、组合成句子，以及这些句子之间的联系方式。</li><li>Grammar（语法）：是指语言中的规则体系，包括了语法规则、语义规则和语用规则等。它涉及到语言的整个结构和组成方式，而不仅仅是句子的构成。</li></ul></div><p>下面的两种示例是等价的：</p><div class="language-nix line-numbers-mode" data-ext="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
 x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
 y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">in</span> x <span class="token operator">+</span> y
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>显然，下面的可读性比上面的差很多：</p><div class="language-nix line-numbers-mode" data-ext="nix"><pre class="language-nix"><code><span class="token keyword">let</span> x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>y<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">in</span> x<span class="token operator">+</span>y
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="名称和值" tabindex="-1"><a class="header-anchor" href="#名称和值" aria-hidden="true">#</a> 名称和值</h4><p>原始数据类型，列表，属性集与函数都可以被当作值。</p><p>我们可以使用 <code>=</code> 为名称赋值，然后用分号分隔赋值语句：</p><div class="language-nix line-numbers-mode" data-ext="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
 foo <span class="token operator">=</span> <span class="token string">&quot;I am a fool&quot;</span><span class="token punctuation">;</span>
 bar <span class="token operator">=</span> <span class="token string">&quot;I am at the bar&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">in</span>
 foo <span class="token operator">+</span> bar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>名称不等同常见编程语言中的变量，没有声明时的开辟内存空间，因为每个名称在计算的时候都会被“替换”为常量。<strong>名称赋值后是不可变的</strong>。它们形成了一种绑定关系，一个值可以被多个名称绑定，一个名称只能绑定一个值。它并不类似 C 语言中的赋值，C 语言中的变量赋值是修改变量引用的内存数据来赋值的。反而更像是常量和常量表达式，编译期就能确定值。</p><h4 id="属性集" tabindex="-1"><a class="header-anchor" href="#属性集" aria-hidden="true">#</a> 属性集</h4><div class="hint-container tip"><p class="hint-container-title">集合</p><p>还记得我们在上面提到的集合吗？其实它真正的名字是属性集，没有过早引入属性集的概念是为了方便读者渐进式地理解。</p></div><p>属性集就是装载若干对名称与值的集合，<strong>集合内的名称被称为这个集合的属性，集合内中由名称和值组成的对则被称为该属性的元素</strong>。示例如下：</p><div class="language-nix line-numbers-mode" data-ext="nix"><pre class="language-nix"><code><span class="token punctuation">{</span>
  string <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
  integer <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  float <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">.</span><span class="token number">141</span><span class="token punctuation">;</span>
  bool <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  list <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span> <span class="token string">&quot;two&quot;</span> <span class="token boolean">false</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
  attribute<span class="token operator">-</span>set <span class="token operator">=</span> <span class="token punctuation">{</span>
    a <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
    b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    c <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">.</span><span class="token number">718</span><span class="token punctuation">;</span>
    d <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment"># 标准 json 不支持注释</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">json 样式</p><p>你可能觉得莫名的像 json，下面是 json 的示例：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;string&quot;</span><span class="token operator">:</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;integer&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token property">&quot;float&quot;</span><span class="token operator">:</span> <span class="token number">3.141</span><span class="token punctuation">,</span>
  <span class="token property">&quot;bool&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">&quot;null&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
  <span class="token property">&quot;list&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;two&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;object&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;a&quot;</span><span class="token operator">:</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;b&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token property">&quot;c&quot;</span><span class="token operator">:</span> <span class="token number">2.718</span><span class="token punctuation">,</span>
    <span class="token property">&quot;d&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>注意到了吗？</p><ul><li>属性不需要添加引号</li><li>列表是用空格分隔的</li></ul><h4 id="递归属性集" tabindex="-1"><a class="header-anchor" href="#递归属性集" aria-hidden="true">#</a> 递归属性集</h4><p>当属性集内的属性需要访问该集合的另一个属性时，应当使用递归属性集：</p><div class="language-nix line-numbers-mode" data-ext="nix"><pre class="language-nix"><code>rec <span class="token punctuation">{</span>
  one <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  two <span class="token operator">=</span> one <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment"># 直接依赖于 one</span>
  three <span class="token operator">=</span> two <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment"># 直接依赖于 two，间接依赖于 one</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出如下：</p><div class="language-nix line-numbers-mode" data-ext="nix"><pre class="language-nix"><code><span class="token punctuation">{</span> one <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> three <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> two <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">注</p><p>元素的声明顺序并不决定元素在属性集中的排布顺序，属性集中的元素排布顺序是由求值顺序决定的，优先被求值的被放在了前面。</p></div><h4 id="let-表达式-let-绑定" tabindex="-1"><a class="header-anchor" href="#let-表达式-let-绑定" aria-hidden="true">#</a> <code>let</code> 表达式 / <code>let</code> 绑定</h4><p><code>let</code> 表达式有两个关键字： <code>let</code> 和 <code>in</code>。在 <code>let</code> 与 <code>in</code> 之间的语句中，你可以声明需要被复用的名称，并将其与值绑定。它们可以在 <code>in</code> 之后的表达式中发挥作用：</p><div class="language-nix line-numbers-mode" data-ext="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
  b <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
  a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">in</span>
a <span class="token operator">+</span> b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>引用到 <code>a</code> 的地方有两处，它们都会将 <code>a</code> “替换“成值来计算或赋值，类似于常量。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>你不需要关心名称的声明顺序，不会出现名称未定义的情况。</p></div><p><strong><code>in</code> 后面只能跟随一个表达式</strong>，我们称表达式内部为 <code>let</code> 作用域，这里演示一个列表：</p><div class="language-nix line-numbers-mode" data-ext="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
  b <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
  c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
  a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">in</span> <span class="token punctuation">[</span> a b c <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出的值为：</p><div class="language-nix line-numbers-mode" data-ext="nix"><pre class="language-nix"><code><span class="token punctuation">[</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container danger"><p class="hint-container-title">作用域</p><p><strong><code>let</code> 表达式是有作用域的，绑定的名称只能在作用域使用：</strong></p><div class="language-nix line-numbers-mode" data-ext="nix"><pre class="language-nix"><code><span class="token punctuation">{</span>
  a <span class="token operator">=</span> <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">in</span> x<span class="token punctuation">;</span>
  b <span class="token operator">=</span> x<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>x</code> 未定义：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>error: undefined variable <span class="token string">&#39;x&#39;</span>

       at «string»:3:7:

            <span class="token number">2</span><span class="token operator">|</span>   a <span class="token operator">=</span> <span class="token builtin class-name">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">in</span> x<span class="token punctuation">;</span>
            <span class="token number">3</span><span class="token operator">|</span>   b <span class="token operator">=</span> x<span class="token punctuation">;</span>
             <span class="token operator">|</span>       ^
            <span class="token number">4</span><span class="token operator">|</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h4 id="属性访问" tabindex="-1"><a class="header-anchor" href="#属性访问" aria-hidden="true">#</a> 属性访问</h4><p>使用 <code>.</code> 访问属性：</p><div class="language-nix line-numbers-mode" data-ext="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
  attrset <span class="token operator">=</span> <span class="token punctuation">{</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">in</span>
  attrset<span class="token punctuation">.</span>x
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问嵌套的属性也是同样的方式：</p><div class="language-nix line-numbers-mode" data-ext="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
  attrset <span class="token operator">=</span> <span class="token punctuation">{</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> b <span class="token operator">=</span> <span class="token punctuation">{</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">in</span>
  attrset<span class="token punctuation">.</span>a<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，就像如何访问属性一样，也可以用 <code>.</code> 赋值它：</p><div class="language-nix line-numbers-mode" data-ext="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
  a<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">in</span>
  a<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="with-表达式" tabindex="-1"><a class="header-anchor" href="#with-表达式" aria-hidden="true">#</a> <code>with</code> 表达式</h4><p><code>with</code> 表达式可以让你少写几次属性集的名称，是个语法糖：</p><div class="language-nix line-numbers-mode" data-ext="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
  a <span class="token operator">=</span> <span class="token punctuation">{</span>
    x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    z <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">in</span>
<span class="token keyword">with</span> a<span class="token punctuation">;</span> <span class="token punctuation">[</span> x y z <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>其实就相当于 [ a.x a.y a.z ]。</p></blockquote><p>作用域被限制到了分号后面的第一个表达式内：</p><div class="language-nix line-numbers-mode" data-ext="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
  a <span class="token operator">=</span> <span class="token punctuation">{</span>
    x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    z <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">in</span>
<span class="token punctuation">{</span>
  b <span class="token operator">=</span> <span class="token keyword">with</span> a<span class="token punctuation">;</span> <span class="token punctuation">[</span> x y z <span class="token punctuation">]</span><span class="token punctuation">;</span>
  c <span class="token operator">=</span> x<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>x</code> 未定义：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>error: undefined variable <span class="token string">&#39;x&#39;</span>

       at «string»:10:7:

            <span class="token number">9</span><span class="token operator">|</span>   b <span class="token operator">=</span> with a<span class="token punctuation">;</span> <span class="token punctuation">[</span> x y z <span class="token punctuation">]</span><span class="token punctuation">;</span>
           <span class="token number">10</span><span class="token operator">|</span>   c <span class="token operator">=</span> x<span class="token punctuation">;</span>
             <span class="token operator">|</span>       ^
           <span class="token number">11</span><span class="token operator">|</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="inherit-表达式" tabindex="-1"><a class="header-anchor" href="#inherit-表达式" aria-hidden="true">#</a> <code>inherit</code> 表达式</h4><p><code>inhherit</code> 本意就是继承，我们可以使用它直接将与属性名相同的名称赋值给它：</p><div class="language-nix line-numbers-mode" data-ext="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
  x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">in</span>
<span class="token punctuation">{</span>
  <span class="token keyword">inherit</span> x y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>没有这个语法糖，我们可能得这样写：</p><div class="language-nix line-numbers-mode" data-ext="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
  x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">in</span>
<span class="token punctuation">{</span>
  x <span class="token operator">=</span> x<span class="token punctuation">;</span>
  y <span class="token operator">=</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以直接从属性集继承名称：</p><div class="language-nix line-numbers-mode" data-ext="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
  a <span class="token operator">=</span> <span class="token punctuation">{</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">in</span>
<span class="token punctuation">{</span>
  <span class="token keyword">inherit</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> x y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>inhert</code> 同样可以在 <code>let</code> 表达式之间使用</p><div class="language-nix line-numbers-mode" data-ext="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
  <span class="token keyword">inherit</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> x y<span class="token punctuation">;</span>
<span class="token keyword">in</span> <span class="token punctuation">[</span> x y <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>等价于：</p><div class="language-nix line-numbers-mode" data-ext="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
  x <span class="token operator">=</span> <span class="token punctuation">{</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span>
  y <span class="token operator">=</span> <span class="token punctuation">{</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>
<span class="token keyword">in</span> <span class="token punctuation">[</span> x y <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将特定属性带到了全局作用域，实现了更方便的解构出同名名称的方法。</p><h4 id="字符串插值" tabindex="-1"><a class="header-anchor" href="#字符串插值" aria-hidden="true">#</a> 字符串插值</h4><p>各大流行语言均已支持，使用 <code>&quot;\${ ... }&quot;</code> 可以插入名称的值：</p><div class="language-nix line-numbers-mode" data-ext="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
  name <span class="token operator">=</span> <span class="token string">&quot;Nix&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">in</span>
<span class="token string">&quot;hello <span class="token interpolation"><span class="token antiquotation important">$</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出为：</p><div class="language-nix line-numbers-mode" data-ext="nix"><pre class="language-nix"><code><span class="token string">&quot;hello Nix&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>字符串插值语法只支持字符串类型</strong>，所以引入的名称的值必须是字符串，或是可以转换为字符串的类型：</p><div class="language-nix line-numbers-mode" data-ext="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
  x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">in</span>
<span class="token string">&quot;<span class="token interpolation"><span class="token antiquotation important">$</span><span class="token punctuation">{</span>x<span class="token punctuation">}</span></span> + <span class="token interpolation"><span class="token antiquotation important">$</span><span class="token punctuation">{</span>x<span class="token punctuation">}</span></span> = <span class="token interpolation"><span class="token antiquotation important">$</span><span class="token punctuation">{</span>x <span class="token operator">+</span> x<span class="token punctuation">}</span></span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为是数字类型，所以报错：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>error: cannot coerce an integer to a string

       at «string»:4:2:

            <span class="token number">3</span><span class="token operator">|</span> <span class="token keyword">in</span>
            <span class="token number">4</span><span class="token operator">|</span> <span class="token string">&quot;<span class="token variable">\${x}</span> + <span class="token variable">\${x}</span> = <span class="token variable">\${x + x}</span>&quot;</span>
             <span class="token operator">|</span>  ^
            <span class="token number">5</span><span class="token operator">|</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字符串插值是可以被嵌套的：</p><div class="language-nix line-numbers-mode" data-ext="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
  a <span class="token operator">=</span> <span class="token string">&quot;no&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">in</span>
<span class="token string">&quot;\${a + &quot;</span> <span class="token antiquotation important">$</span><span class="token punctuation">{</span>a <span class="token operator">+</span> <span class="token string">&quot; <span class="token interpolation"><span class="token antiquotation important">$</span><span class="token punctuation">{</span>a<span class="token punctuation">}</span></span>&quot;</span><span class="token punctuation">}</span><span class="token string">&quot;}&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出为：</p><div class="language-nix line-numbers-mode" data-ext="nix"><pre class="language-nix"><code><span class="token string">&quot;no no no&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="路径类型" tabindex="-1"><a class="header-anchor" href="#路径类型" aria-hidden="true">#</a> 路径类型</h4><p>路径在 Nix 语言中不是字符串类型，而是一种独立的类型，以下是一些路径的示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./relative  <span class="token comment"># 当前文件夹下 relative文件（夹）的相对路径</span>
/current/directory/absolute  <span class="token comment"># 绝对路径，从根目录开始指定</span>
<span class="token punctuation">..</span>/  <span class="token comment"># 上级目录</span>
<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/  <span class="token comment">#上级的上级目录</span>
./  <span class="token comment"># 当前路径</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="检索路径" tabindex="-1"><a class="header-anchor" href="#检索路径" aria-hidden="true">#</a> 检索路径</h4><p>检索路径是通过系统变量来获取路径的语法，由一对尖括号组成：</p><div class="language-nix line-numbers-mode" data-ext="nix"><pre class="language-nix"><code><span class="token operator">&lt;</span>nixpkgs<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,81),w={href:"https://nixos.org/manual/nix/unstable/command-ref/env-common.html?highlight=nix_path#env-NIX_PATH",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"$NIX_PATH",-1),_=p(`<div class="language-nix line-numbers-mode" data-ext="nix"><pre class="language-nix"><code>/n<span class="token url">ix/var/nix/profiles/per-user/root/channels/nixpkgs</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们建议你<strong>避免</strong>使用检索路径来指定其它相对路径，比如下面的例子：</p><div class="language-nix line-numbers-mode" data-ext="nix"><pre class="language-nix"><code><span class="token operator">&lt;</span><span class="token url">nixpkgs/lib</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>这是一种亵渎</strong>，因为这样指定相对路径会让配置与环境产生联系。我们的配置文件应该尽量保留纯函数式的特性，即输出只与输入有关，函数不会与外界产生任何联系。</p><h4 id="多行字符串" tabindex="-1"><a class="header-anchor" href="#多行字符串" aria-hidden="true">#</a> 多行字符串</h4><p>注意，这里不是一对双引号，而是两对单引号：</p><div class="language-nix line-numbers-mode" data-ext="nix"><pre class="language-nix"><code><span class="token string">&#39;&#39;
multi
line
string
&#39;&#39;</span>

<span class="token string">&#39;&#39;
  one
   two
    three
&#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分别等价于：</p><div class="language-nix line-numbers-mode" data-ext="nix"><pre class="language-nix"><code><span class="token string">&quot;multi\\nline\\nstring&quot;</span>

<span class="token string">&quot;one\\n two\\n  three\\n&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h4><p>函数在 Nix 语言中是人上人，我们先来声明一个匿名函数（Lambda）：</p><div class="language-nix line-numbers-mode" data-ext="nix"><pre class="language-nix"><code>x<span class="token punctuation">:</span> x <span class="token operator">+</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这是个嵌套的函数，支持多重参数：</p><div class="language-nix line-numbers-mode" data-ext="nix"><pre class="language-nix"><code>x<span class="token punctuation">:</span> y<span class="token punctuation">:</span> x <span class="token operator">+</span> y
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数当然可以是属性集类型：</p><div class="language-nix line-numbers-mode" data-ext="nix"><pre class="language-nix"><code><span class="token punctuation">{</span> a<span class="token punctuation">,</span> b <span class="token punctuation">}</span><span class="token punctuation">:</span> a <span class="token operator">+</span> b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为函数指定默认参数：</p><div class="language-nix line-numbers-mode" data-ext="nix"><pre class="language-nix"><code><span class="token punctuation">{</span> a<span class="token punctuation">,</span> b <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">:</span> a <span class="token operator">+</span> b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>允许传入额外的属性：</p><div class="language-nix line-numbers-mode" data-ext="nix"><pre class="language-nix"><code><span class="token punctuation">{</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">:</span> a <span class="token operator">+</span> b  <span class="token comment"># 明确传入的属性有 a 和 b，传入额外的属性将被忽略</span>
<span class="token punctuation">{</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">:</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c <span class="token comment"># 即使传入的属性有 c，一样不会参与计算，这里会报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>为额外的参数命名参数集，然后调用：</p><div class="language-nix line-numbers-mode" data-ext="nix"><pre class="language-nix"><code>args<span class="token operator">@</span><span class="token punctuation">{</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">:</span> a <span class="token operator">+</span> b <span class="token operator">+</span> args<span class="token punctuation">.</span>c
<span class="token punctuation">{</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token operator">@</span>args<span class="token punctuation">:</span> a <span class="token operator">+</span> b <span class="token operator">+</span> args<span class="token punctuation">.</span>c  <span class="token comment"># 也可以是这样</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>为函数命名：</p><div class="language-nix line-numbers-mode" data-ext="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
  f <span class="token operator">=</span> x<span class="token punctuation">:</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">in</span> f
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用函数，并使用函数解构属性集：</p><div class="language-nix line-numbers-mode" data-ext="nix"><pre class="language-nix"><code>concat <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">,</span> b <span class="token punctuation">}</span><span class="token punctuation">:</span> a <span class="token operator">+</span> b  <span class="token comment"># 等价于 concat = x: x.a + x.b</span>
concat <span class="token punctuation">{</span> a <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span> b <span class="token operator">=</span> <span class="token string">&quot;NixOS&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-nix line-numbers-mode" data-ext="nix"><pre class="language-nix"><code>Hello NixOS
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>由于函数与参数使用空格分隔，所以我们可以使用括号将函数体与参数分开：</p><div class="language-nix line-numbers-mode" data-ext="nix"><pre class="language-nix"><code><span class="token punctuation">(</span>x<span class="token punctuation">:</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span>  <span class="token comment"># 向该 Lambda 函数传入参数 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="柯里化函数" tabindex="-1"><a class="header-anchor" href="#柯里化函数" aria-hidden="true">#</a> 柯里化函数</h4><p>我们将 <code>f (a,b,c)</code> 转换为 <code>f (a)(b)(c)</code> 的过程就是柯里化。为什么需要柯里化？因为很灵活，还可以避免重复传入参数，当你传入第一个参数的时候，该函数就已经具有了第一个参数的状态。说起状态这里就要提一嘴闭包，闭包就是带状态的函数。在离散数学中，闭包也是使某种关系具有某种性质的一种运算。</p><p>TODO：</p><p>我们早就说过，函数是可以当成正常值传递的，当然可以作为函数的参数传入： 上文中我们提到过 Nix 语言是用于描述打包过程的，这个过程指代的是求值每个包的属性和配置的过程，每个</p><h3 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h3><h3 id="惰性" tabindex="-1"><a class="header-anchor" href="#惰性" aria-hidden="true">#</a> 惰性</h3><p>并非所有在 nix 包中的表达式都会被立刻求值和实例化，只有在需要值的时候才会被求值。在下面的示例中，<code>abort</code> 不可能被触发，因为它所属的变量没有被使用：</p><div class="language-nix line-numbers-mode" data-ext="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
  a <span class="token operator">=</span> <span class="token function">abort</span> <span class="token string">&quot;will never happen&quot;</span><span class="token punctuation">;</span>
  b <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
  c <span class="token operator">=</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">in</span> b <span class="token operator">+</span> c
\`\`

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,38);function N($,j){const a=l("ExternalLinkIcon");return o(),i("div",null,[r,n("p",null,[s("该语言是为 "),n("a",d,[s("Nix 包管理器"),e(a)]),s(" 设计的，用于配置 NixOS。本篇分为基础部分与进阶部分。你可以阅读完基础部分并配置好 NixOS 后，再来学习进阶部分并优化配置。")]),u,n("p",null,[s("使用 "),n("a",k,[v,e(a)]),s(" 对 "),m,s(" 文件中存在的表达式进行求值：")]),b,n("div",x,[h,n("p",null,[n("a",g,[s("Alejandra"),e(a)]),s(" 是一个新兴的 Nix 代码格式化工具，使用 Rust 编写。你可以"),n("a",y,[s("在线尝试"),e(a)]),s("它。")])]),q,n("p",null,[s("实际上是解析到了系统变量中一个叫 "),n("a",w,[f,e(a)]),s(" 的路径值：")]),_])}const S=t(c,[["render",N],["__file","index.html.vue"]]);export{S as default};
