import{_ as a,V as e,W as i,$ as h}from"./framework-d73c2841.js";const r={},n=h('<h1 id="nixos-简介" tabindex="-1"><a class="header-anchor" href="#nixos-简介" aria-hidden="true">#</a> NixOS 简介</h1><p>NixOS 是独立的 Linux 发行版，其构建与部署方式在众多发行版中独具一格。同时 NixOS 的社区也在迅速发展，我们在此欢迎你迈出学习 NixOS 的第一步。</p><h2 id="让你爱上-nixos-的五个理由" tabindex="-1"><a class="header-anchor" href="#让你爱上-nixos-的五个理由" aria-hidden="true">#</a> 让你爱上 NixOS 的五个理由</h2><h3 id="几乎滚不挂" tabindex="-1"><a class="header-anchor" href="#几乎滚不挂" aria-hidden="true">#</a> 几乎滚不挂</h3><p>每一次构建或升级，依赖关系会被重新计算，然后产生新的“生成”（generation），系统状态也被变更到新的生成所对应的状态。如果想恢复到以前的状态，可以选择需要回滚到旧的的“生成”。</p><h3 id="可复现部署" tabindex="-1"><a class="header-anchor" href="#可复现部署" aria-hidden="true">#</a> 可复现部署</h3><p>独特的函数式配置让 NixOS 可以通过一份相同的配置文件，部署多个（几乎）相同的系统。</p><h3 id="轻松回滚" tabindex="-1"><a class="header-anchor" href="#轻松回滚" aria-hidden="true">#</a> 轻松回滚</h3><p>在你的系统引导界面中，可以选择正常的“生成”进行回滚。</p><h3 id="众多的软件包" tabindex="-1"><a class="header-anchor" href="#众多的软件包" aria-hidden="true">#</a> 众多的软件包</h3><p>NixOS 是个对于打包爱好者友好的发行版，你可以在这里找到 AUR （ArchLinux 用户仓库，它提供了众多软件的构建脚本）的感觉。</p><h3 id="一骑绝尘的依赖管理" tabindex="-1"><a class="header-anchor" href="#一骑绝尘的依赖管理" aria-hidden="true">#</a> 一骑绝尘的依赖管理</h3><p>在 NixOS 中，不同版本的软件可以在一个系统内共存，这就是 NixOS 的魔法之一。通过 nix-shell 可以不用操心版本冲突，直接创建出你需要的环境。</p>',13),d=[n];function t(s,c){return e(),i("div",null,d)}const o=a(r,[["render",t],["__file","whyNixOS.html.vue"]]);export{o as default};
