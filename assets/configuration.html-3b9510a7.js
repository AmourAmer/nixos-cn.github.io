import{_ as i,X as t,Y as o,Z as a,$ as e,a0 as r,a2 as n,E as d}from"./framework-eeef2183.js";const c={},p=n(`<h1 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h1><h2 id="包管理" tabindex="-1"><a class="header-anchor" href="#包管理" aria-hidden="true">#</a> 包管理</h2><p>这一节我们会讨论如何为你的系统添加额外的包。NixOS 包管理的方式有两种：</p><ul><li><p>配置文件声明。你可以在配置文件为系统或用户声明需要安装的包，每次你重新生成系统，NixOS 都会确保本地包含了你指定的这些包。</p></li><li><p>即抛环境。你可以创建一个临时环境，运行或安装你需要的软件。当你退出这个环境后，环境会被销毁，一切都是你创建环境前的样子，保证了系统的纯净。</p></li></ul><h3 id="声明式包管理" tabindex="-1"><a class="header-anchor" href="#声明式包管理" aria-hidden="true">#</a> 声明式包管理</h3><p>在 <code>configuration.nix</code> 中， 提供用于声明系统环境包含的包的 <code>environment.systemPackages</code> 数组：</p><div class="language-nix line-numbers-mode" data-ext="nix"><pre class="language-nix"><code>environment<span class="token punctuation">.</span>systemPackages <span class="token operator">=</span> <span class="token punctuation">[</span> pkgs<span class="token punctuation">.</span>firefox <span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment"># 将来源于 pkgs(Nixpkgs) 的包安装到系统</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>配置文件并不是实时生效的。你需要运行 <code>sudo nixos-rebuild switch</code> 来生成当前配置文件描述的系统。</p>`,8),h={class:"hint-container note"},l=a("p",{class:"hint-container-title"},"依赖配置",-1),u={href:"https://nixos.org/manual/nixos/stable/options.html",target:"_blank",rel:"noopener noreferrer"},x=n(`<p>你可以使用以下命令获取当前可用的包列表：</p><div class="language-nix line-numbers-mode" data-ext="nix"><pre class="language-nix"><code>$ nix<span class="token operator">-</span>env <span class="token operator">-</span>qaP &#39;*&#39; <span class="token operator">-</span><span class="token operator">-</span>description
nixos<span class="token punctuation">.</span>firefox   firefox<span class="token operator">-</span><span class="token number">23</span><span class="token punctuation">.</span><span class="token number">0</span>   Mozilla Firefox <span class="token operator">-</span> the browser<span class="token punctuation">,</span> reloaded
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通常会输出很多行可以获取的包的信息。第一列输出是属性名（例如<code>nixos.firefox</code>）。</p><div class="hint-container note"><p class="hint-container-title">前缀</p><p><code>nixos</code> 前缀表明当前包是从 <code>nixos</code> 频道获取的。</p></div><p>如果你想卸载这个包，修改配置后重新生成系统即可。</p><h2 id="用户管理" tabindex="-1"><a class="header-anchor" href="#用户管理" aria-hidden="true">#</a> 用户管理</h2><h2 id="文件系统" tabindex="-1"><a class="header-anchor" href="#文件系统" aria-hidden="true">#</a> 文件系统</h2><h2 id="显示服务" tabindex="-1"><a class="header-anchor" href="#显示服务" aria-hidden="true">#</a> 显示服务</h2><h3 id="x11" tabindex="-1"><a class="header-anchor" href="#x11" aria-hidden="true">#</a> X11</h3><h3 id="wayland" tabindex="-1"><a class="header-anchor" href="#wayland" aria-hidden="true">#</a> Wayland</h3><h2 id="gpu-加速" tabindex="-1"><a class="header-anchor" href="#gpu-加速" aria-hidden="true">#</a> GPU 加速</h2><h2 id="桌面环境" tabindex="-1"><a class="header-anchor" href="#桌面环境" aria-hidden="true">#</a> 桌面环境</h2><h3 id="xfce" tabindex="-1"><a class="header-anchor" href="#xfce" aria-hidden="true">#</a> XFCE</h3><h3 id="gnome" tabindex="-1"><a class="header-anchor" href="#gnome" aria-hidden="true">#</a> GNOME</h3><h3 id="kde" tabindex="-1"><a class="header-anchor" href="#kde" aria-hidden="true">#</a> KDE</h3>`,15);function f(k,m){const s=d("ExternalLinkIcon");return t(),o("div",null,[p,a("div",h,[l,a("p",null,[e("对于某些包（例如依赖 D-Bus 或 systemd 服务注册的包），仅仅是安装还是不够的，我们需要为它们对系统进行一些配置。 你可以访问"),a("a",u,[e("选项列表"),r(s)]),e("来检索需要启用的 NixOS 模块。")])]),x])}const v=i(c,[["render",f],["__file","configuration.html.vue"]]);export{v as default};
