import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as e}from"./app-55d6f86c.js";const i="/images/GreenHand/EnableUefi.png",t="/images/GreenHand/VmResAllocation.png",o="/images/GreenHand/VmNet.png",p="/images/GreenHand/FirstEncounterWithTty.png",l="/images/GreenHand/Efivars.png",c="/images/GreenHand/CheckNet.png",r="/images/GreenHand/RebuildSystem.png",d="/images/GreenHand/Lsblk.png",u={},m=e('<h1 id="虚拟机安装" tabindex="-1"><a class="header-anchor" href="#虚拟机安装" aria-hidden="true">#</a> 虚拟机安装</h1><p>无论你使用什么虚拟机安装，过程都是大同小异的。需要注意的是 HyperV 的安全启动是默认开启的，需要你手动关掉。<br> 以下教程是基于 UEFI 的安装，所以还需要你启用 VMWARE 的 UEFI 选项（如果你真的使用 VMWARE 的话）。</p><figure><img src="'+i+'" alt="启用 UEFI" tabindex="0" loading="lazy"><figcaption>启用 UEFI</figcaption></figure><h2 id="创建虚拟机" tabindex="-1"><a class="header-anchor" href="#创建虚拟机" aria-hidden="true">#</a> 创建虚拟机</h2><p>虚拟机的资源大小取决于你的应用，这个教程仅为新手提供一种基本系统的安装方法，更加高阶的个性化教程会在额外的章节提及。<br> 本文使用创建的虚拟机的内存为 8GB，硬盘为 32GB 大小。如果你的计算机资源不够，理论上是可以尝试开辟更小的资源。</p><figure><img src="'+t+'" alt="资源分配" tabindex="0" loading="lazy"><figcaption>资源分配</figcaption></figure><h2 id="检查虚拟网络" tabindex="-1"><a class="header-anchor" href="#检查虚拟网络" aria-hidden="true">#</a> 检查虚拟网络</h2><p>部分 VMWARE 用户会遇到网络无法连接到宿主机网络的问题，可能是虚拟网络未配置导致的，推荐下面的 NAT 配置：</p><figure><img src="'+o+'" alt="虚拟网络" tabindex="0" loading="lazy"><figcaption>虚拟网络</figcaption></figure><p>如果你看到图上的按钮和文本框大多为灰色，记得点击以下右下角的 UAC 蓝色盾牌以修改设置。HyperV 的虚拟交换机保持默认设置就好，一般而言没有那么容易出问题。</p><h2 id="检查-uefi-变量" tabindex="-1"><a class="header-anchor" href="#检查-uefi-变量" aria-hidden="true">#</a> 检查 UEFI 变量</h2><p>然后假设你如愿开机进入 Live CD 了：</p><figure><img src="'+p+`" alt="与 TTY 相遇" tabindex="0" loading="lazy"><figcaption>与 TTY 相遇</figcaption></figure><p>为了分区的时候遇到麻烦，还是先验证一下 UEFI 是否真正启用：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ls</span> /sys/firmware/efi/efivars
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+l+`" alt="EFI 变量" tabindex="0" loading="lazy"><figcaption>EFI 变量</figcaption></figure><h2 id="检查网络" tabindex="-1"><a class="header-anchor" href="#检查网络" aria-hidden="true">#</a> 检查网络</h2><p>随便 Ping 几个主机：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ping</span> www.baidu.com <span class="token parameter variable">-c</span> <span class="token number">4</span>
<span class="token function">ping</span> <span class="token number">119.29</span>.29.29 <span class="token parameter variable">-c</span> <span class="token number">4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+c+`" alt="Ping" tabindex="0" loading="lazy"><figcaption>Ping</figcaption></figure><h2 id="更换镜像频道" tabindex="-1"><a class="header-anchor" href="#更换镜像频道" aria-hidden="true">#</a> 更换镜像频道</h2><p>频道类似一种获取软件源码包的一种软件源。</p><p>由于未知原因大陆访问远洋主机有点困难，还是用镜像服务器吧：</p><div class="hint-container warning"><p class="hint-container-title">注意系统版本</p><p>截至笔者截稿，NixOS 当前最新版本为 23.05，遂命令也是针对这个版本而生效的，更新的版本请注意替换命令中的<mark>系统版本号</mark>。</p></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> nix-channel <span class="token parameter variable">--add</span> https://mirrors.ustc.edu.cn/nix-channels/nixpkgs-unstable nixpkgs  <span class="token comment"># 订阅镜像仓库频道</span>
<span class="token function">sudo</span> nix-channel <span class="token parameter variable">--add</span> https://mirrors.ustc.edu.cn/nix-channels/nixos-23.05 nixos  <span class="token comment"># 请注意系统版本</span>
<span class="token function">sudo</span> nix-channel <span class="token parameter variable">--list</span>  <span class="token comment"># 列出频道，这一步是确认修改没有出错</span>
<span class="token function">sudo</span> nix-channel <span class="token parameter variable">--update</span>  <span class="token comment"># 更新并解包频道</span>
<span class="token function">sudo</span> nixos-rebuild <span class="token parameter variable">--option</span> substituters <span class="token string">&quot;https://mirrors.ustc.edu.cn/nix-channels/store&quot;</span> switch <span class="token parameter variable">--upgrade</span>  <span class="token comment"># 临时切换二进制缓存源，并更新生成</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不出意外就能顺利构建：</p><figure><img src="`+r+`" alt="使配置生效" tabindex="0" loading="lazy"><figcaption>使配置生效</figcaption></figure><h2 id="分区与格式化" tabindex="-1"><a class="header-anchor" href="#分区与格式化" aria-hidden="true">#</a> 分区与格式化</h2><p>查看一下我们要分区的设备：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>lsblk
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+d+`" alt="块设备" tabindex="0" loading="lazy"><figcaption>块设备</figcaption></figure><p>可以看出 <code>/dev/sda</code> 就是我们要分区的设备。</p><p>接下来进入 <code>parted</code> 的交互模式开始分区，请注意这些修改是实时生效的，所以不需要你操心保存的事。</p><div class="hint-container tip"><p class="hint-container-title">单位问题</p><p>两种单位的计算方法不一致，MB 以 10 为底计算，而 MiB 以 2 为底计算，这也许能解答你对 <code>parted</code> 显示的硬盘时大时小的疑惑。GiB 与 GB 同理。</p></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">parted</span> /dev/sda
mklabel gpt
mkpart ESP fat32 1MiB 256MiB
p
<span class="token builtin class-name">set</span> <span class="token number">1</span> esp on
mkpart primary 256MB <span class="token parameter variable">-8GB</span>
mkpart primary linux-swap <span class="token parameter variable">-8GB</span> <span class="token number">100</span>%
p
quit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">保留 1 MiB</p><p>1 MiB 可以保证分区标识，也就是说，分区的起始扇区包含了分区的类型、大小、位置等信息，这些信息是操作系统识别和加载分区的重要依据，如果这些信息被破坏或覆盖，就会导致分区无法启动或者数据丢失。</p></div><p>以上命令创建的分区有：</p><ul><li>一个引导分区，存放内核和引导</li><li>一个主分区，放置软件，用户数据</li><li>一个交换分区（虚拟内存）</li></ul><p>但是光创建分区还不够，还需要格式化：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> mkfs.fat <span class="token parameter variable">-F</span> <span class="token number">32</span> /dev/sda1
<span class="token function">sudo</span> mkfs.btrfs <span class="token parameter variable">-L</span> nixos /dev/sda2
<span class="token function">sudo</span> <span class="token function">mkswap</span> <span class="token parameter variable">-L</span> /dev/sda3
<span class="token function">sudo</span> <span class="token function">mount</span> /dev/sda2 /mnt
<span class="token function">sudo</span> btrfs subvolume create /mnt/root
<span class="token function">sudo</span> btrfs subvolume create /mnt/home
<span class="token function">sudo</span> btrfs subvolume create /mnt/nix
<span class="token function">sudo</span> <span class="token function">umount</span> /mnt
<span class="token function">sudo</span> <span class="token function">mount</span> <span class="token parameter variable">-o</span> <span class="token assign-left variable">compress</span><span class="token operator">=</span>zstd,subvol<span class="token operator">=</span>root /dev/sda2 /mnt
<span class="token function">sudo</span> <span class="token function">mkdir</span> /mnt/<span class="token punctuation">{</span>home,nix,boot<span class="token punctuation">}</span> 
<span class="token function">sudo</span> <span class="token function">mount</span> <span class="token parameter variable">-o</span> <span class="token assign-left variable">compress</span><span class="token operator">=</span>zstd,subvol<span class="token operator">=</span>home /dev/sda2 /mnt/home
<span class="token function">sudo</span> <span class="token function">mount</span> <span class="token parameter variable">-o</span> <span class="token assign-left variable">compress</span><span class="token operator">=</span>zstd,noatime,subvol<span class="token operator">=</span>nix /dev/sda2 /mnt/nix
<span class="token function">sudo</span> <span class="token function">mount</span> /dev/sda1 /mnt/boot
<span class="token function">sudo</span> <span class="token function">swapon</span> /dev/sda3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上命令创建了三个 btrfs 子卷，格式化了引导分区，然后我们挂载他们，并启用交换分区。然后生成配置到目标系统中：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> nixos-generate-config <span class="token parameter variable">--root</span> /mnt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们还需要在默认配置上修改一些内容，才能完成一个粗放的安装：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">vim</span> /mnt/etc/nixos/configuration.nix
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-nix line-numbers-mode" data-ext="nix"><pre class="language-nix"><code>boot<span class="token punctuation">.</span>loader<span class="token punctuation">.</span>systemd<span class="token operator">-</span>boot<span class="token punctuation">.</span>enable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
boot<span class="token punctuation">.</span>loader<span class="token punctuation">.</span>efi<span class="token punctuation">.</span>canTouchEfiVariables <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
networking<span class="token punctuation">.</span>networkmanager<span class="token punctuation">.</span>enable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
time<span class="token punctuation">.</span>timeZone <span class="token operator">=</span> <span class="token string">&quot;Asia/Shanghai&quot;</span><span class="token punctuation">;</span>
i18n<span class="token punctuation">.</span>defaultLocale <span class="token operator">=</span> <span class="token string">&quot;en_US.UTF-8&quot;</span><span class="token punctuation">;</span>
services<span class="token punctuation">.</span>xserver<span class="token punctuation">.</span>enable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
enviroment<span class="token punctuation">.</span>systemPackages <span class="token operator">=</span> <span class="token keyword">with</span> pkgs<span class="token punctuation">;</span> <span class="token punctuation">[</span>
    vim<span class="token punctuation">,</span>
    wget<span class="token punctuation">,</span>
    curl<span class="token punctuation">,</span>
    alacritty
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于生成配置命令没有写入 btrfs 的挂载参数，我们需要自己加上：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">vim</span> /mnt/etc/nixos/configuration.nix
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后开始部署系统：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> nixos-install <span class="token parameter variable">--option</span> substituters <span class="token string">&quot;https://mirrors.ustc.edu.cn/nix-channels/store&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">缓存缺失</p><p>如果缓存主机缺失某些二进制缓存，带来了冗长的编译环节，可以尝试更换一个 <code>substituter</code>，比如 <code>https://mirror.sjtu.edu.cn/nix-channels/store</code>。</p></div><p>添加用户</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> nixos-enter
<span class="token function">passwd</span> root 
<span class="token function">useradd</span> <span class="token parameter variable">-m</span> <span class="token parameter variable">-G</span> wheel tritium
<span class="token function">passwd</span> tritium
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后重启（最好断掉虚拟机的光驱），就能看到安装好的系统了</p>`,53),v=[m];function b(k,g){return s(),a("div",null,v)}const x=n(u,[["render",b],["__file","VirtualMachine.html.vue"]]);export{x as default};
